[4] 런타임 개입 메커니즘

설계된 입장 통제 구조는 단순히 정적 구성 요소의 배치로 끝나지 않으며, 실제 사용자 요청이 발생했을 때 시스템이 어떤 흐름으로 동작하고, 어떤 시점에서 어떤 조건을 평가하며, 어떤 리소스를 점유 또는 복원하는지를 명확히 규정하는 런타임 개입 흐름이 필요하다. 다음은 실시간 채팅 시스템 내 WebSocket 기반 입장 구조에서, 입장 요청부터 세션 종료까지의 모든 흐름에 대한 런타임 개입 구조를 상세히 설명한 것이다.

1. 입장 요청 발생
- 클라이언트는 REST API를 통해 입장 요청을 보낸다.
- 서버는 요청 시점을 기준으로 JoinRequestQueueManager에 userId와 timestamp 정보를 포함한 RequestEntry를 roomNumber 큐에 삽입한다.
- 이 삽입 과정은 ConcurrentLinkedQueue 기반으로, CAS 연산을 통해 순서가 보존된 상태로 비경합적으로 처리된다.

2. WebSocket 연결 시도 및 자원 선점
- 클라이언트는 이후 WebSocket 연결을 수행하며, 서버에서는 afterConnectionEstablished() 또는 confirmJoinRoom() 등의 메서드에서 입장 가능 여부를 판단한다.
- 이 시점에서 Java Semaphore의 tryAcquire() 호출을 통해 해당 방에 입장 가능한 permit이 존재하는지를 확인한다.
- permit이 존재하지 않을 경우, 입장 거부 및 연결 종료 처리된다.

3. 큐 선두 검증 및 최종 입장 허가
- permit을 획득한 경우, 서버는 해당 사용자가 해당 roomNumber 큐의 선두 사용자와 일치하는지 queue.peek()를 통해 확인한다.
- userId가 일치할 경우 큐에서 poll()로 제거하고 입장을 허가한다.
- 일치하지 않을 경우 순서 위반으로 간주되며, permit은 release()로 복원되고 사용자는 입장이 거부된다.

4. 연결 종료 처리 및 자원 복구
- 사용자가 정상 퇴장하거나 브라우저 종료, 예외 등으로 WebSocket 세션이 종료될 경우, afterConnectionClosed()에서 세마포어 release()를 호출하여 permit을 복원한다.
- 이를 통해 세마포어 자원이 회수되며, 이후 입장 대기 중인 사용자들이 다시 tryAcquire()를 통해 입장을 시도할 수 있게 된다.

이 구조는 시스템 실행 시점의 조건 기반 분기 처리를 명확히 기술한 것으로, 설계자가 요청 발생, 자원 선점, 순서 검증, 입장 허가, 자원 복구까지 전 과정을 통제할 수 있는 구조적 기반을 제공한다.
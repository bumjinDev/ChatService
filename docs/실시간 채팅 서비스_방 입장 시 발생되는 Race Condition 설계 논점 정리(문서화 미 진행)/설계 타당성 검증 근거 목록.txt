[포트폴리오용 설계 타당성 및 검증 기반 정립 목록]

[1] 구조적 타당성 보증 – 공식 문서 및 학술 근거

1.1 ConcurrentLinkedQueue
- 출처: Oracle Java SE 8 API
- 링크: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html
- 설명: CAS 기반 락 프리 FIFO 큐 구조. 설계 근거로 사용 가능.
- 포트폴리오 문장 예시:
  “입장 요청 큐는 ConcurrentLinkedQueue를 기반으로 구현되었으며, 이는 Michael & Scott 알고리즘에 따라 CAS 기반으로 원자적 삽입/삭제가 가능하고 스레드 경합 없이 FIFO 순서를 보장한다.”

1.2 Semaphore
- 출처: Oracle Java SE 8 API
- 링크: https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html
- 설명: 자원 개수 통제, tryAcquire()와 release()로 동시성 통제 구조 설명에 활용.
- 포트폴리오 문장 예시:
  “입장 허용 여부는 Semaphore 기반으로 제어되며, tryAcquire()를 통해 자원 선점이 성공한 사용자만 입장을 허용하고, 입장 종료 시에는 release()를 통해 자원을 복원한다.”

1.3 Spring WebSocket 비동기 구조
- 출처: Spring 공식 문서
- 링크: https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket
- 설명: WebSocket은 비동기적으로 처리되며 요청 도달 시점이 예측 불가능함. 요청 순서와 입장 순서를 분리 설계하는 논거가 됨.
- 예시:
  “WebSocket 연결은 도달 순서가 예측되지 않으므로, queue 기반 순서 제어와 결합된 입장 제어 로직이 요구된다.”

[2] 테스트 및 실측 기반 검증 전략

2.1 TTL 만료 테스트
- 구성: TTL을 짧게 설정하고 WebSocket 연결을 지연 → purge 된 것 확인
- 활용: purgeExpiredEntries()의 동작 보증
- 문장 예시:
  “TTL을 5초로 설정한 후 WebSocket 연결을 지연시켜 테스트한 결과, TTL 초과 요청이 자동으로 제거되는 것을 확인하였다.”

2.2 입장 순서 위반 방지
- 구성: queue.peek() ≠ userId 인 경우 세마포어 release 후 연결 차단
- 검증: 비순차 요청 차단 기능 구현 여부
- 문장 예시:
  “입장 요청 큐의 선두와 현재 사용자 ID를 비교하여 불일치 시 입장을 거부함으로써 논리 순서 위반을 차단하였다.”

2.3 세마포어 자원 복원 검증
- 구성: tryAcquire() 후 입장 중단 → release 누락 여부 로그 확인
- 문장 예시:
  “WebSocket 연결 해제 시 afterConnectionClosed() 내에서 세마포어 자원 복원을 수행하여 자원 누수를 방지한다.”

[3] 포트폴리오 활용 문장 예시 요약

- 입장 요청은 ConcurrentLinkedQueue 기반으로 FIFO 순서가 보장됩니다.
- 입장 허가는 Semaphore를 통해 자원 선점 성공자만 입장이 가능합니다.
- queue.peek()를 통한 사용자 ID 확인으로 요청 순서와 실제 입장 순서를 일치시킵니다.
- TTL 기반 purge 로직을 통해 유효하지 않은 요청은 구조적으로 제거됩니다.
- Spring WebSocket의 비동기 처리 구조를 고려하여 순서 정합성을 구조적으로 보정하였습니다.
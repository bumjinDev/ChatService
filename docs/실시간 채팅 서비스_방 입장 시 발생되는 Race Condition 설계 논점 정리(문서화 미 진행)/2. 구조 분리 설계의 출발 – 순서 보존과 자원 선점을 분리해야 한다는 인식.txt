[2] 구조 분리 설계의 출발 – 순서 보존과 자원 선점을 분리해야 한다는 인식

최초 문제 인식 과정에서 확인된 두 가지 충돌, 즉 입장 순서의 왜곡과 동시 입장 시 인원 수 초과 문제는 단순한 구현 상의 오류가 아닌, 구조 내부의 책임 배분이 부적절하다는 점에서 비롯되었다. 구체적으로는, “사용자가 먼저 요청을 했는가”와 “현재 방에 입장 가능한가”라는 두 조건이 동일한 로직 또는 동일한 구조 내에서 동시에 판단되면서, 요청 순서와 입장 허가가 혼재된 결정 경로가 만들어졌고, 이로 인해 구조적으로 경합 상황에 대한 대응이 불가능해졌다.

예를 들어, 하나의 if (현재 인원 < 제한 인원) 조건문 안에서 동시에 사용자 ID, 요청 시간, 현재 인원 수 등을 비교하고 판단하는 구조는 외형상 간단하지만, 실제로는 각기 다른 기준을 동시에 평가하고 있으며, 이 기준들은 네트워크 지연, 스레드 실행 순서, TTL 만료 여부, 상태 복원 지연 등 여러 가지 외부 요인에 따라 독립적으로 변화하는 요소들이다. 이러한 다중 조건을 하나의 시점에서 통제하려는 시도는 구조적으로 불가능하거나 무결성을 보장할 수 없다는 결론에 도달했다.

따라서 이 구조는 근본적으로 "입장 요청의 순서를 보존하는 책임"과 "입장 가능한 인원 수를 제어하는 책임"을 완전히 독립된 구조적 단위로 분리해야만 시스템이 논리적으로 정합성을 유지할 수 있다는 인식으로 이어졌다. 구체적으로는 다음과 같은 구조적 판단이 내려졌다:

- 순서 보존은 큐의 책임이다. 사용자가 요청한 순서를 기억하고 TTL 범위 내에서 유효한 요청을 유지하는 책임은 별도의 큐 관리 구조체가 담당한다. 이 구조는 ConcurrentLinkedQueue를 활용한 락 프리 구조로 구현되며, 요청을 삽입하거나 만료된 요청을 정리하는 과정은 CAS 기반 비차단 흐름으로 처리된다.

- 입장 허가는 세마포어의 책임이다. 사용 가능한 인원 수를 제어하고, 현재 시점에서 실제로 입장이 허가될 수 있는 사용자인지를 판단하는 것은 세마포어라는 명시적 허가자 구조가 담당한다. 이 구조는 단순한 count 조건문이 아니라, 실제로 자원을 점유할 수 있는지를 시스템적으로 통제한다.

- 큐와 세마포어는 구조적으로 병렬 존재한다. 순서와 인원 제한은 설계자의 의도에 따라 동시에 고려되어야 하는 분기 조건이며, 이를 하나의 코드 블록에서 처리하는 것이 아니라, 두 개의 독립 구조가 병렬로 구성되어 논리적으로 통합 평가되도록 설계되어야 한다.

이로써 기존에는 요청 순서와 입장 가능 여부를 하나의 조건문이나 서비스 로직에서 처리하려고 했던 구조적 시도는 폐기되었고, 책임 분리(Separation of Concerns)를 전제로 한 두 구조 병렬화 설계가 시작되었다. 이 판단은 이후 기술 선택, 제어 흐름 설계, 예외 처리 전략까지 모든 구조적 결정의 기준점으로 작용하게 된다.
[실시간 채팅 시스템 - 동시 입장 제한 설계 구조 정리]

📌 주제: 입장 자격 조건에 기반한 큐 구조와 동기화 제어 모델 정립

이 문서는 실시간 채팅 시스템의 방 입장 과정에서 발생할 수 있는 동시성 문제를 방지하기 위해 설계된 구조를 이론적 기반과 함께 기술한 문서이다. 본 구조는 단순 구현 차원을 넘어서, 자원 통제 추상화의 설계적 해석 및 동기화 전략의 적합성과 비적합성까지 분석하였다.

---

1. 설계 목표와 시나리오 전제

- 하나의 채팅방(Room)은 최대 입장 가능한 인원 수(maxCapacity)를 설정할 수 있다.
- 클라이언트는 REST 기반 API를 통해 사전 입장 요청을 보내며, 이후 WebSocket 연결을 통해 실질적 입장을 수행한다.
- 입장 자격은 '현재 입장 중인 인원 수'와 '큐에 대기 중인 인원 수'의 합이 최대 인원 수보다 작을 경우에만 부여된다.
- 입장 자격이 없을 경우 클라이언트는 즉시 예외 응답을 받으며, 대기하거나 재시도하지 않는다.

---

2. 세마포어(Semaphore)의 부적합성 판단

- 세마포어는 공유 자원(예: 커넥션 풀, 포트, I/O) 등에 대해 "현재 자원이 없으면 대기"를 전제로 한 자원 접근 제어 모델이다.
- 세마포어는 자원 사용이 "반드시" 이루어져야 할 때에만 타당한 구조이며, 자원 접근 실패를 허용하는 구조에서는 부적합하다.
- 본 시스템에서는 입장 조건이 충족되지 않으면 요청을 실패 처리하며 흐름을 종료하므로, 대기 기반의 블로킹 모델은 철학적으로 맞지 않는다.
- 또한 입장 요청 시점과 입장 완료 시점이 분리되어 있기 때문에, 세마포어의 수량 감소와 자원 소비 시점이 불일치하게 되어 상태 정합성을 보장할 수 없다.

---

3. 뮤텍스(Mutex) 기반 동기화 구조의 제한적 적용

- 입장 조건 판별과 큐 등록 작업은 반드시 원자적으로 수행되어야 하며, 이를 위해 뮤텍스 개념을 구조에 포함한다.
- 단, 전역 synchronized 블록이 아닌, 각 방 번호별 락 객체(`getRoomMutex(roomNumber)`)를 사용하여 락 경합을 최소화한다.
- 이 락은 `JoinRequestQueueManager.tryAddUserToQueue(...)` 메서드 내부에 적용되어, "입장 가능 조건 판단 → 큐 삽입"까지의 구간을 단일 임계 구역으로 통제한다.

---

4. 설계 흐름 명세

1) 사용자가 방 입장을 시도하면, Service Layer (`RoomJoinService`)에서 `confirmJoinRoom()`이 호출된다.
2) 이 메서드는 현재 DB 기준 방 입장 인원 수, 큐 상태를 합산하여 정원 초과 여부를 판단한다.
3) 초과 시 예외(`RoomFullException`)를 발생시키고 즉시 흐름을 종료한다. 이 구조는 '대기하지 않는 조건 분기 모델'이다.
4) 조건 충족 시 `JoinRequestQueueManager`에 사용자 ID를 큐에 등록하며, 이 과정은 synchronized 블록으로 보호된다.
5) WebSocket 연결 시, 핸들러는 큐에 사용자 ID가 존재하는지를 확인하여 실입장을 허용한다. 이 시점은 비동기 흐름이므로 큐 등록 시점과 분리된다.

---

5. 설계적 결론

- 본 구조는 자원의 수량을 직접 추상화하지 않으며, 상태 확인에 기반한 실행 조건 분기 모델로 정의된다.
- 세마포어는 설계 철학 및 실행 흐름 모델과 부합하지 않아 명시적으로 배제된다.
- 뮤텍스는 자원 보호가 아닌, '자격 부여' 판단 구간에서만 제한적으로 적용되며, 이는 동기화의 최소 단위화를 달성한다.
- 사용자 경험상 빠른 실패 응답을 통해 UX를 보장하며, 시스템은 상태 정합성, 자격 중복 방지, 구조적 안전성을 확보한다.

---

6. 이력서 및 포트폴리오 기술 요소화 제안 (예시 문장)

> "REST-then-WebSocket 기반 2단계 입장 구조에서 발생 가능한 동시 입장 충돌 문제를 해결하기 위해, 조건 기반 자격 판별 + 뮤텍스 기반 큐 삽입 구조를 설계하였으며, 세마포어의 구조적 부적합성을 식별하고 배제함으로써 설계 정합성과 예외 안정성을 확보한 경험이 있습니다."

---

7. Barrier(장벽) 구조의 설계상 부적합성 판단

- Barrier는 모든 스레드가 특정 지점에 도달한 이후에만 다음 단계로 진행 가능하도록 통제하는 집단 동기화 모델이다.
- 이는 스레드 간 동기 시점을 통일해야 하는 집계 계산, 상태 전이 등에서는 유용하나, 개별 흐름이 독립적으로 분기되고 실패를 허용하는 구조에서는 부적합하다.
- 본 설계는 요청의 조건 충족 여부에 따라 개별 흐름으로 분기되며, 어느 요청도 다른 요청의 완료 여부를 기다릴 필요가 없으므로 Barrier 적용은 논리적으로 배제된다.
- 또한 상태 기준 분기와 실행 순서 분리가 존재하므로 Barrier가 보장하려는 '집단 도달 → 집단 해제' 구조와 철학적으로 충돌된다.

---

8. 교착 상태 조건에 대한 구조적 안전성 해석

- 전통적인 병행 시스템 이론에 따르면, 교착 상태는 상호 배제(Mutual Exclusion), 점유와 대기(Hold and Wait), 비선점(No Preemption), 순환 대기(Circular Wait)의 네 가지 조건이 모두 충족될 때 발생한다.
- 본 시스템은 '조건 미충족 시 즉시 실패하는 흐름 분기' 모델을 채택하고 있으며, 요청 간 의존 관계를 허용하지 않고, 실패 시 재시도나 대기를 강제하지 않으므로 점유와 대기 조건이 충족되지 않는다.
- 또한 요청은 자격 조건을 충족한 경우에만 개별적으로 승인되며, 순차 자원 확보 구조를 따르지 않으므로 순환 대기 역시 원천 차단된다.
- 이로 인해 구조적으로 네 가지 교착 조건이 충족되지 않으며, 설계 차원에서 교착 상태의 발생 가능성을 제거한 구조라고 판단된다.
